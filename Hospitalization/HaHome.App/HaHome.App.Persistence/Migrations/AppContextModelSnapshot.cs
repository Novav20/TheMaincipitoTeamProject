// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using AppContext = HaHome.App.Persistence.AppRepositories.AppContext;

namespace HaHome.App.Persistence.Migrations
{
    [DbContext(typeof(AppContext))]
    partial class AppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("HaHome.App.Domain.Entities.CareSuggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("CareSuggestions");
                });

            modelBuilder.Entity("HaHome.App.Domain.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enviroment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("HaHome.App.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Cellphone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("HaHome.App.Domain.Entities.VitalSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Sign")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("HaHome.App.Domain.Entities.Doctor", b =>
                {
                    b.HasBaseType("HaHome.App.Domain.Entities.Person");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalSpecialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RethusRecord")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("HaHome.App.Domain.Entities.Nurse", b =>
                {
                    b.HasBaseType("HaHome.App.Domain.Entities.Person");

                    b.Property<string>("ProfessionalCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkingHours")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("HaHome.App.Domain.Entities.Patient", b =>
                {
                    b.HasBaseType("HaHome.App.Domain.Entities.Person");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int");

                    b.Property<int?>("RelativeId")
                        .HasColumnType("int");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("NurseId");

                    b.HasIndex("RelativeId");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("HaHome.App.Domain.Entities.Relative", b =>
                {
                    b.HasBaseType("HaHome.App.Domain.Entities.Person");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Relative");
                });

            modelBuilder.Entity("HaHome.App.Domain.Entities.CareSuggestion", b =>
                {
                    b.HasOne("HaHome.App.Domain.Entities.History", null)
                        .WithMany("Suggestions")
                        .HasForeignKey("HistoryId");
                });

            modelBuilder.Entity("HaHome.App.Domain.Entities.VitalSign", b =>
                {
                    b.HasOne("HaHome.App.Domain.Entities.Patient", null)
                        .WithMany("VitalSigns")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("HaHome.App.Domain.Entities.Patient", b =>
                {
                    b.HasOne("HaHome.App.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("HaHome.App.Domain.Entities.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("HaHome.App.Domain.Entities.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.HasOne("HaHome.App.Domain.Entities.Relative", "Relative")
                        .WithMany()
                        .HasForeignKey("RelativeId");

                    b.Navigation("Doctor");

                    b.Navigation("History");

                    b.Navigation("Nurse");

                    b.Navigation("Relative");
                });

            modelBuilder.Entity("HaHome.App.Domain.Entities.History", b =>
                {
                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("HaHome.App.Domain.Entities.Patient", b =>
                {
                    b.Navigation("VitalSigns");
                });
#pragma warning restore 612, 618
        }
    }
}
